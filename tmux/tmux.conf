# remap prefix from 'C-b' to 'C-a'

unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix


COLOR=#3f51b5

if-shell '[ $(hostname) = "thinkpad" ]' COLOR=#8AB4F8

# binds
set-window-option -g mode-keys vi
bind \\ split-window -h -c "#{pane_current_path}"
bind-key / copy-mode \; send-key ?
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %
bind r source-file /etc/tmux.conf
bind b set status
unbind f
bind f display-panes
unbind d
set -g @scroll-speed-num-lines-per-scroll 1

bind-key -n C-Tab next-window
bind-key -n C-S-Tab previous-window

set-option -gw xterm-keys on
set -g mouse on
set -g destroy-unattached on
set -g renumber-windows on

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
unbind c
bind c break-pane
bind n new-window -c "#{pane_current_path}"
bind N new-window 
bind Enter new-window -c "#{pane_current_path}"
bind-key -n C-s next-window

set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none
set -g base-index 1
setw -g pane-base-index 1
set -g status-interval 1 
set-option -g history-limit 20000
set-option -sg escape-time 10
set-option -g default-terminal "screen-256color"

#  modes
setw -g clock-mode-colour brightyellow
setw -g mode-style 'fg=black bg=#{COLOR}'

# panes
set -g pane-border-style 'fg=black bg=default'
set -g pane-active-border-style 'bg=default fg=#{COLOR}'

# statusbar
set -g status-position bottom
set -g status-justify left
set -g status-style 'bg=default fg=#{COLOR} dim'

set -g status-left ' '
set -g status-right ' '

# set -g status-right ' #[fg=black,bg=#{COLOR}][#(id -u -n)]#[bg=default] '
##[fg=#{COLOR},bg=default bold] #H

set -g status-right-length 40
set -g status-left-length 20

setw -g window-status-current-style 'fg=black bg=#{COLOR} bold'
setw -g window-status-current-format ' #I#[fg=colour0]:#[fg=colour0]#W '

setw -g window-status-style 'fg=#{COLOR} bg=default bold'
setw -g window-status-format ' #I#[fg=#{COLOR}]:#[fg=#{COLOR}]#W '

setw -g window-status-bell-style 'fg=black bg=#{COLOR}'

# messages
set -g message-style 'fg=black bg=#{COLOR}'

# Emulate scrolling by sending up and down keys if these commands are running in the pane
tmux_commands_with_legacy_scroll="nano less more man git"

bind-key -T root WheelUpPane \
	if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
			"send -t= Up" "copy-mode -et="'

bind-key -T root WheelDownPane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
			"send -t= Down" "send -Mt="'


# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-H' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-J' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-K' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-L' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-H' select-pane -L
bind-key -T copy-mode-vi 'C-J' select-pane -D
bind-key -T copy-mode-vi 'C-K' select-pane -U
bind-key -T copy-mode-vi 'C-L' select-pane -R


bind-key -n C-l send-keys 'C-l'

#copy and paste!

set -g set-clipboard external
unbind [
bind v copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# system clipboard copy
# bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "clipboard"

# system clipboard paste
# bind p paste-buffer
bind-key p run "tmux set-buffer $(clipboard) ; tmux paste-buffer"  

#plugins

# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-yank'

# run '~/.local/share/tmux/tpm/tpm'

set -g @yank_action 'copy-pipe-no-clear'
